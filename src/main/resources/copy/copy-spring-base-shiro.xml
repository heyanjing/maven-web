<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
    1、凭证匹配
    2、配置realm
    3、shiro的缓存管理  ehcacheManager是spring-base-cache.xml中配置的
    4、配置安全管理
    5、LifecycleBeanPostProcessor用于在实现了Initializable接口的Shiro bean初始化时调用Initializable接口回调，在实现了Destroyable接口的Shiro bean销毁时调用 Destroyable接口回调
    6、配置拦截器  id必须与web中配置的拦截器名称相同
    -->

    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5"/>
        <property name="hashIterations" value="1024"/>
    </bean>

    <bean id="shiroRealm" class="com.he.spring.shiro.realm.ShiroRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
        <!-- <property name="cacheManagerConfigFile" value="classpath:some/path/to/ehcache.xml"/> -->
    </bean>

    <!--
    多个Realm时，
    authenticator 配置认证器，默认的认证策略AtLeastOneSuccessfulStrategy
    同时将认证器赋值给securityManager安全管理器
    <bean id="shiroRealm2" class="com.he.spring.shiro.ShiroRealm2">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="realms">
            <list>
                <ref bean="shiroRealm"/>
                <ref bean="shiroRealm2"/>
            </list>
        </property>
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        //方式一
        <property name="authenticator" ref="authenticator"/>
        //方式二 一般选择第二种
        <property name="realms">
            <list>
                <ref bean="shiroRealm"/>
                <ref bean="shiroRealm2"/>
            </list>
        </property>
    </bean>
-->

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 删除失效session -->
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <!-- session失效时间（毫秒） -->
        <property name="globalSessionTimeout" value="1800000" />
        <property name="sessionDAO" ref="customShiroSessionDao" />
    </bean>
    <!--
        单reaml时
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面-->
        <property name="loginUrl" value="/"/>
        <!--访问未授权的路径时跳转的页面-->
        <property name="unauthorizedUrl" value="/error/403"/>
        <!--
        配置那些路径需要那些权限 ,依次匹配，匹配成功就不会再匹配
        anon    可以匿名访问
        authc   必须认证后在访问（登陆）
        logout  注销,会自动清除shiro的缓存
        -->
        <property name="filterChainDefinitions">
            <value>
                /static/**=anon
                /kaptcha/**=anon
                /=anon
                /user/**=anon



                /page1=user,roles[user1]
                /page2=roles[user2]
                /**=authc
                <!--
                /user/**=anon
                /person/**=anon
                /home/**=anon
                /dog/**=anon


                /mydemo/login=anon
                /mydemo/getVerifyCodeImage=anon
                /main**=authc
                /user/info**=authc
                /admin/listUser**=authc,perms[admin:manage]
                / = anon
				/user/psd/** = anon
				/update = anon
				/help = anon
				/about = anon
				/reg/** = anon
				/exam/** = anon
				/face/** = anon
				/mobile/** = anon
				/test/** = anon
				/logout = logout

				/user/** = ajaxAuthc,kickout
				/org/** = anon
				/admin/** = ajaxAuthc
				/monitor/** = ajaxAuthc
				/print/** = ajaxAuthc-->
            </value>
        </property>
    </bean>

</beans>
