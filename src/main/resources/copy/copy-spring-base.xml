<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
    <!-- 配置spring的工具类 -->
    <bean id="springs" class="com.he.spring.base.util.Springs"/>
    <bean id="person" class="com.he.spring.entity.Person"/>
    <!--载入配置文件
     ${env}.properties
     -->
    <context:property-placeholder location="classpath*:/config/config.properties"/>
    <!-- 要扫描的包 -->
    <context:component-scan base-package="com.he.spring">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <!-- 请求超时时间 -->
        <property name="checkoutTimeout" value="30000"/>
        <!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="30"/>
        <!-- 连接数据库连接池最大空闲时间 -->
        <property name="maxIdleTime" value="30"/>
        <!-- 连接池初始化连接数 -->
        <property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="5"/>
    </bean>
    <bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="sa"/>
        <property name="password" value="000000"/>
        <property name="driverClass" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
        <property name="jdbcUrl" value="jdbc:log4jdbc:jtds:sqlserver://localhost:1433/springweb_uuid;charset=UTF-8"/>
        <!-- 请求超时时间 -->
        <property name="checkoutTimeout" value="30000"/>
        <!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="30"/>
        <!-- 连接数据库连接池最大空闲时间 -->
        <property name="maxIdleTime" value="30"/>
        <!-- 连接池初始化连接数 -->
        <property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="5"/>
    </bean>

    <bean id="dynamicDataSource" class="com.he.spring.multidatasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSource" key="mysql"></entry>
                <entry value-ref="dataSource2" key="sqlserver"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource">
        </property>
    </bean>

    <!-- 配置 JPA 的 EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="packagesToScan" value="com.he.spring"/>
        <property name="jpaProperties">
            <props>
                <!-- 生成的数据表的列的映射策略
                <prop key="hibernate.ejb.naming_strategy">${hibernate.ejb.naming_strategy}</prop>
                -->
                <prop key="hibernate.physical_naming_strategy">${hibernate.physical_naming_strategy}</prop>
                <!-- hibernate 基本属性 -->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <!--二级缓存 一般不开启 -->
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
            </props>
        </property>
    </bean>
    <!-- 配置 SpringData -->
    <jpa:repositories base-package="com.he.spring" entity-manager-factory-ref="entityManagerFactory" factory-class="com.he.spring.base.dao.repo.BaseRepoFactoryBean"/>
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!-- 注解方式配置事物   底层有个别用到-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置事务属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" timeout="300"/>
            <tx:method name="find*" read-only="true" timeout="300"/>
            <tx:method name="list*" read-only="true" timeout="300"/>
            <tx:method name="page*" read-only="true" timeout="300"/>
            <!-- 所有非上面方法开头的方法在同一事务里 -->
            <tx:method name="*" propagation="REQUIRED" timeout="300" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!--假设有个切面
    <bean id="" class="com.he.spring.aop.AspectTest"/>
    -->
    <!--配置申明式事务 -->
    <aop:config>
        <aop:pointcut id="aopPointcut" expression="execution(* com.he.spring.service..*.*(..))"/>
        <aop:advisor pointcut-ref="aopPointcut" advice-ref="txAdvice"/>
        <!-- xml配置切面
        <aop:aspect  ref="aspectTest" >
            <aop:before method="before" pointcut-ref="aopPointcut"/>
            <aop:after method="after" pointcut-ref="aopPointcut"/>
            <aop:after-returning method=""/>
            <aop:after-throwing method=""/>
            <aop:around method=""/>
        </aop:aspect>
        -->
    </aop:config>

    <!--配置数据源的aop-->
    <bean id="dataSourceInterceptor" class="com.he.spring.multidatasource.DataSourceInterceptor"/>
    <aop:config>
        <aop:pointcut id="daoOne" expression="execution(* com.he.spirng..*.*(..))"/>
        <aop:pointcut id="daoTwo" expression="execution(* com.he.sqlserver..*.*(..))"/>
        <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor">
            <aop:before pointcut-ref="daoOne" method="setdataSourceMysql"/>
            <aop:before pointcut-ref="daoTwo" method="setdataSourceSqlserver"/>
        </aop:aspect>
    </aop:config>

    <!--
    // MEINFO:2017/6/13 14:59 开启aop注解支持 激活自动代理功能  只能以非controller层为切入点
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    -->


    <!--解析返回JSON
    <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jsonConverter" />
            </list>
        </property>
    </bean>
   -->
</beans>
