<?xml version="1.0" encoding="UTF-8"?>
<sitemesh>
	<!--
	默认情况下， sitemesh 只对 HTTP 响应头中 Content-Type 为 text/html 的类型进行拦截和装饰， 我们可以添加更多的 mime 类型
	<mime-type>application/vnd.wap.xhtml+xml</mime-type>
	<mime-type>application/xhtml+xml</mime-type>
	<mime-type>text/html</mime-type>
	-->

	<!-- 默认装饰器，当下面的路径都不匹配时，启用该装饰器进行装饰
	<mapping decorator="/default-decorator.html"/>
	-->

	<!--
	对不同的路径，启用不同的装饰器
	<mapping path="/a/*" decorator="/WEB-INF/layout/decorator/a/a.jsp"/>
	-->
	<mapping path="/home**" decorator="/WEB-INF/layout/decorator/home.jsp"/>

	<!-- 对同一路径，启用多个装饰器
	<mapping>
	<path>/articles/*</path>
	<decorator>/decorators/article.html</decorator>
	<decorator>/decorators/two-page-layout.html</decorator>
	<decorator>/decorators/common.html</decorator>
	</mapping>
	-->

	<!-- 排除，不进行装饰的路径
	<mapping path="/javadoc/*" exclue="true"/>
	<mapping path="/brochures/*" exclue="true"/>
	-->

	<!-- 自定义 tag 规则
	Sitemesh 3 默认只提供了 body，title，head 等 tag 类型，我们可以通过实现 TagRuleBundle 扩展自定义的 tag 规则：
	public class MyTagRuleBundle implements TagRuleBundle {
	@Override
	public void install(State defaultState, ContentProperty contentProperty,
	SiteMeshContext siteMeshContext) {
	defaultState.addRule("myHeader", new ExportTagToContentRule(contentProperty.getChild("myHeader"), false));

	}

	@Override
	public void cleanUp(State defaultState, ContentProperty contentProperty,
	SiteMeshContext siteMeshContext) {
	}
	}

	<content-processor>
	<tag-rule-bundle class="com.something.CssCompressingBundle" />
	<tag-rule-bundle class="com.something.LinkRewritingBundle"/>
	</content-processor>
	-->

</sitemesh>